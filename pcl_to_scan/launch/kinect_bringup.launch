<launch>
	<!-- kinect and frame ids -->
	<arg name="debug" default="false"/>
  	<arg if="$(arg debug)" name="launch_prefix" value="xterm -rv -e gdb -ex run -args"/>
	<arg unless="$(arg debug)" name="launch_prefix" value=""/>
	<node pkg="openni_camera" type="openni_node" name="openni_node1" output="screen" launch-prefix="$(arg launch_prefix)">
	    <!--param name="topic" value="first" /-->
	    <!--param name="device_id" value="2@3" --> <!-- this line uses device on usb bus 2 and addres 3 -->
	    <!--param name="device_id" value="B00367707227042B"/--> <!-- this line uses device with given serial number -->

	    <param name="device_id" value="#1"/> <!-- this line uses first enumerated device -->
	    <rosparam command="load" file="$(find openni_camera)/info/openni_params.yaml" />
	    <param name="rgb_frame_id" value="/openni_rgb_optical_frame" />
	    <param name="depth_frame_id" value="/openni_depth_optical_frame" />
	    <param name="use_indices" value="false" />
	    <param name="depth_registration" value="false" />
	    <param name="image_mode" value="5" />
	    <param name="depth_mode" value="5" />
	    <param name="debayering" value="2" />
	    <param name="depth_time_offset" value="0" />
	    <param name="image_time_offset" value="0" />
	</node>

	<node pkg="kinect_aux" type="kinect_aux_node" name="kinect_aux_node"/>

	<node pkg="pcl_to_scan" type="kinect_tf_broadcaster.py" name="kinect_tf_broadcaster"/>

	<node pkg="nodelet" type="nodelet" name="openni_camera" args="manager" output="screen"/>

	<!-- throttling -->
	<node pkg="nodelet" type="nodelet" name="pointcloud_throttle" args="load pcl_to_scan/CloudThrottle openni_camera">
		<param name="max_rate" value="2"/>
		<remap from="cloud_in" to="/camera/depth/points"/>
		<remap from="cloud_out" to="cloud_throttled"/>
	</node>	
	
	<!-- Run a passthrough filter to transform cloud -->
	<node pkg="nodelet" type="nodelet" name="passthrough" args="load pcl/PassThrough openni_camera" output="screen">
		<remap from="~input" to="cloud_throttled" />
		<remap from="~output" to="cloud_transformed" />
		<param name="output_frame" value="/kinect_base"/>
		<rosparam>
filter_field_name: z
filter_limit_min: 0.01
filter_limit_max: 10
filter_limit_negative: False
</rosparam>
	</node>
</launch>
